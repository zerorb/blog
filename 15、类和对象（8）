#include<iostream>
using namespace std;


//一共有6个默认成员函数：构造，析构，拷贝构造，运算符重载
//还有两个不常用的：const重载，取地址重载，一般不关注，用的很少，没什么意义

class Date
{
public:
	Date(int year = 0, int month = 1, int day = 1)
	{
		_year = year;
		_month = month;
		_day = day;
	}
	//对象调用const成员函数
	void Print() const        //Print(Date* this)   不能自己去写，只能把const加在后面
	{
		cout << _year << " " << _month << " " << _day << endl;
		//const修饰后不能改成员变量
		//const Date* p1;       const修饰的是指针指向的对象
		//Date const * p2;		指向的对象
		//Date* const p3;		指针本身
		//const在*前修饰对象，后修饰指针本身
	}
	//成员函数调用const成员函数
	//除了静态的，只要调用成员函数都涉及指针
/*
	void f1()			//f1(Date* this)
	{
		f2();			//this->f2(this)     可读可写的可以调用只读的
	}
	void f2() const
	{
	}
	void f3()
	{
	}
	void f4() const		//f4(const Date* this)
	{
		f3();			//this->f3(this)	只读的不能调用可读可写的
	}
*/
	Date* operator&()
	{
		cout << "Date* operator&()" << endl;
		//return this;
		return nullptr;			//一般不想让别人看到我的地址直接赋空，但是用的很少
	}
	const Date* operator&() const							//这两个重载，Date*和const Date*
	{
		cout << "const Date* operator&() const" << endl;
		return this;	
	}
private:
	int _year;
	int _month;
	int _day;
};

void func(const Date& d)
{
	d.Print();    //d.Print(&d)    d的类型是const Date*   不能传给Date*   权限放大
}

int main()
{
	Date d1;
	func(d1);

	Date d2;
	Date d3;
	const Date d4;
	cout << &d2 << endl;		//取地址重载
	cout << &d3 << endl;
	cout << &d4 << endl;
	return 0;
}

//const对象不能调用非const成员函数
//非const对象可以调用const成员函数
//const成员函数不能调用非const成员函数
//非const成员函数可以调用const成员函数
