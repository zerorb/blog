#include<iostream>
using namespace std;



//C++通过6个默认成员函数解决随机值问题
//构造，析构，拷给构造，运算符重载，取地址重载，const对象取地址
//因为C++比Java产生的早，在这里，继承，异常等地方，Java避开了一些C++的坑

//默认构造函数分三种：无参的，全缺省的，编译器自动生成的。   他们只能同时存在一种

class Time
{
public:
	Time()
	{
		_hour = 0;
		_minute = 0;
		_second = 0;

		cout << "Time" << endl;
	}
private:
	int _hour;
	int _minute;
	int _second;

};

class Date
{
public:
	//构造函数—>在对象构造时调用的函数，完成初始化工作    （构造函数看成初始化函数，python里构造函数叫__init）
	//特点：1、函数名和类名相同；2、无返回值；3、对象实例化时编译器自动调用对应构造函数；4、	构造函数可重载
	//      5、如果类中没有显式定义构造函数，则C++编译器会自动生成一个无参的默认构造函数，一旦用户显式定义，编译器不会生成

	
/*	Date(int year, int month, int day)
	{
		_year = year;
		_month = month;
		_day = day;
	}
	Date()//重载构造函数
	{
		_year = 0;
		_month = 1;
		_day = 1;
	}
*/

	//Date(Date* this,int year,int month,int day)
	Date(int year = 0, int month = 1, int day = 1)//全缺省构造函数
	{
		_year = year;
		_month = month;
		_day = day;
	}
	//默认无参构造函数
	//1、针对内置类型的成员变量没有做处理
	//2、针对自定义类型的成员变量，调用它的构造函数初始化

	//析构函数特点：1、无参无返回值 2、一个类有且只有一个 3、为显式定义，系统自动生成
	//             4、对象生命周期结束时系统自动调用,完成对象里面的资源清理工作，不是d1、d2的销毁(d1、d2存在栈帧中，栈帧结束时才销毁)
	~Date()
	{

		cout << "~Date" << endl;
	}


	void Init(int year, int month, int day)
	{
		_year = year;
		_month = month;
		_day = day;
	}
	void Print()//void Print(Date* this)
	{
		cout << _year << "-" << _month << "-" << _day << endl;
	}

private:
	int _year;
	int _month;
	int _day;

	Time _t;
};

class Stack
{
public:
	Stack(int n = 10)
	{
		_a = (int*)malloc(sizeof(int) * n);
		_size = 0;
		_capacity = n;
	}
	~Stack()
	{
		if (_a)
		{
			free(_a);
			cout << _a << endl;
			_a = nullptr;
			_size = _capacity = 0;

		}
	}
private:
	int* _a;
	int _size;
	int _capacity;
};

int main()
{
	//对象实例化时自动调用构造函数
/*	Date d1(2025, 4, 18);//在对象后传参，而不是在函数名后传参
	d1.Print();
	d1.Init(2025, 4, 7);
	d1.Print();
*/

	Date d1;//由于没有显式的构造函数，编译器调用生成的默认构造函数
	d1.Print();//这里是一堆随机值，是否意味着调了默认的构造函数和没调一样，都是随机值？

	Date d2(2025,4);//Date d2() 不能加()  编译器报错
	d2.Print();

	Stack st1;
	//在栈帧中，先构造d1再d2再st1，先析构st1再d2再d1
	return 0;
}



//自定义类型，不写构造函数，编译器默认写一个无参的，写了，编译器就不会写
//在定义时，既有带参的又有不带参的，就要自己写两个重载构造函数
//更好的方式，只写一个全缺省构造函数
//从右往左缺省，从左往右传参（缺省指的是：形参从右边开始赋一个初始值；传参：实参从左边开始传）
//例如：
//void func(int x,int y = 1,int z = 2)
//func(10,20)
